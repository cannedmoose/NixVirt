#!/usr/bin/python3
import sys, argparse, uuid, lxml.etree, json, libvirt, nixvirt

parser = argparse.ArgumentParser(prog='nixvirt-module-helper',description='Define and control a collection of libvirt objects idempotently.')
parser.add_argument('-v', '--verbose', action='store_true', help='report actions to stderr')
parser.add_argument('--connect', action='store', required=True, metavar='URI', help='connection URI (e.g. qemu:///session)')
parser.add_argument('settingspath', action='store', metavar='PATH', help='path to JSON file of settings')
args = parser.parse_args()

with open(args.settingspath,"r") as f:
    settings = json.load(f)

try:
    session = nixvirt.Session(args.connect,args.verbose)

    types = [("network","networks"),("pool","pools"),("domain","domains")]
    itempairs = [(nixvirt.getObjectConnection(session,type),itemlist) for (type,key) in types if (itemlist := settings.get(key)) is not None]

    # do defining and undefining, deactivating as necessary
    def getSubjectPair(oc,itemlist):

        subjectitemlist = [(oc.fromDefinitionFile(item["definition"]),item) for item in itemlist]

        allObjects = oc.getAll()
        keepUUIDs = [subject.uuid for (subject,item) in subjectitemlist]
        for object in allObjects:
            if object.uuid in keepUUIDs or not object_lvobj.isPersistent():
                pass
            else:
                object.undefine()

        return (oc,subjectitemlist)

    subjectpairs = [getSubjectPair(oc,itemlist) for (oc,itemlist) in itempairs]

    # do activation
    for (oc,subjectitemlist) in subjectpairs:
        for (subject,item) in subjectitemlist:
            subject.setActive(item.get("active"))

except libvirt.libvirtError as err:
    print ("NixVirt: error:", err, file=sys.stderr)
    sys.exit(1)
