#!/usr/bin/python3
import sys, argparse, uuid, lxml.etree, json, libvirt, nixvirt, subprocess

parser = argparse.ArgumentParser(prog='nixvirt-module-helper',description='Define and control a collection of libvirt objects idempotently.')
parser.add_argument('-v', '--verbose', action='store_true', help='report actions to stderr')
parser.add_argument('--connect', action='store', required=True, metavar='URI', help='connection URI (e.g. qemu:///session)')
parser.add_argument('settingspath', action='store', metavar='PATH', help='path to JSON file of settings')
args = parser.parse_args()

with open(args.settingspath,"r") as f:
    settings = json.load(f)

class TypeSpec:
    def __init__(self,session,type,itemlist):
        self.oc = nixvirt.getObjectConnection(session,type)
        self.type = type
        self.specList = [nixvirt.ObjectSpec.fromDefinitionFile(self.oc,item["definition"],item.get("active")) for item in itemlist]

    def deleteOld(self):
        allObjects = self.oc.getAll()
        keepUUIDs = [objspec.specUUID for objspec in self.specList]
        for object in allObjects:
            if object.uuid in keepUUIDs or not object._lvobj.isPersistent():
                pass
            else:
                object.undefine()

    def define(self):
        defineResults = {}
        for objspec in self.specList:
            defineResults[objspec.specName] = objspec.define()
        return defineResults

    def setActive(self):
        for objspec in self.specList:
            objspec.setActive()

try:
    session = nixvirt.Session(args.connect,args.verbose)

    types = [("network","networks"),("pool","pools"),("domain","domains")]
    defineResults = {}

    typeSpecs = []
    for (type,key) in types:
        itemlist = settings.get(key)
        if itemlist is not None:
            typeSpecs.append(TypeSpec(session,type,itemlist))

    # delete old stuff
    for typeSpec in typeSpecs:
        typeSpec.deleteOld()

    # define new stuff
    for typeSpec in typeSpecs:
        defineResults[typeSpec.type] = typeSpec.define()

    # do activation
    for typeSpec in typeSpecs:
        typeSpec.setActive()
    
    # reset network for Domains that had a network change
    network_results = defineResults["network"]
    domain_results = defineResults["domain"]
    networkSession = nixvirt.getObjectConnection(session,"network")
    domainSession = nixvirt.getObjectConnection(session,"domain")
    shouldReset = set()
    for network_name in network_results:
        result = network_results[network_name]

        if result != "changed": continue
        network = networkSession.fromNameOrNone(network_name)
        for dependent in networkSession._getDependents(network):
            if not dependent.isActive(): continue
            dependentXML = dependent.descriptionXMLETree(True)
            name = dependentXML.find("name").text
            if name not in domain_results or domain_results[name] != "unchanged":
                continue
            intfs = dependentXML.xpath(f"/domain/devices/interface[@type='network']/source[@network='{network_name}']")
            for intf in intfs:
                net_bridge = (intf.xpath("./@bridge") or [None])[0]
                net_target = (intf.getparent().xpath("./target/@dev") or [None])[0]
                if net_bridge is not None and net_target is not None:
                    subprocess.run(["brctl", "addif", net_bridge, net_target])
                else:
                    shouldReset.add(name)
    for reset in shouldReset:
        domain = domainSession.fromName(name)
        domain._deactivate()
        domain._activate()

                 


except libvirt.libvirtError as err:
    print ("NixVirt: libvirt error:", err, file=sys.stderr)
    sys.exit(1)

except lxml.etree.XMLSyntaxError as err:
    print ("NixVirt: XML error:", err, file=sys.stderr)
    sys.exit(1)
