#!/usr/bin/python3
import sys, argparse, uuid, lxml.etree, re, libvirt, nixvirt, code

from xmldiff import main

# parse arguments
parser = argparse.ArgumentParser(prog='virtdeclare',description='Define and control libvirt objects idempotently.')
parser.add_argument('-v', '--verbose', action='store_true', help='report actions to stderr')
parser.add_argument('--connect', action='store', required=True, metavar='URI', help='connection URI (e.g. qemu:///session)')
parser.add_argument('--type', action='store', required=True, choices = nixvirt.objectTypes, help='object type')
specgroup = parser.add_mutually_exclusive_group(required=True)
specgroup.add_argument('--define', action='store', metavar='PATH', help='XML object definition file path')
specgroup.add_argument('--uuid', action='store', metavar='ID', help='object UUID')
specgroup.add_argument('--name', action='store', metavar='ID', help='object name')
parser.add_argument('--state', action='store', choices = ['active','inactive'], help='state to put object in')
parser.add_argument('--auto', action='store_true', help='set autostart to match state')

args = parser.parse_args()

setstate = args.state


### HMM IT IS A SUBSTANTIAL CHANGE IF MAC IS DECLARED IN THE specDef and is different from the foundDef
def hasDefChanged(foundXML, subjectXML, specDefXML):
    # so we compare found to subject
    # also subject to spec
    # if there's a mac addres change in found to subject
        # if there's a matching change in spec -> subject
            # it is substantial
        # otherwise it is not? 
    libvirtDiff = main.diff_trees(foundDefXML, subjectXML)
    specDiff = main.diff_trees(specDefXML, subjectXML)

    for diff in libvirtDiff:
        # Any diff that's not insertion or change of a mac address we don't care about
        if type(diff).__name__ != "UpdateAttrib" and type(diff).__name__ != "InsertAttrib":
            return True
        if not diff.node.split("/")[-1].startswith("mac"):
            return True
        if not diff.name == "address":
            return True
        
        # It may just be a an automated mac address change - check specdiff to see
        found_match = False
        for sdiff in specDiff:
            # Any diff that's not insertion or change of a mac address we don't care about
            if type(sdiff).__name__ != "UpdateAttrib" and type(sdiff).__name__ != "InsertAttrib":
                continue
            if not sdiff.node.split("/")[-1].startswith("mac"):
                continue
            if not sdiff.name == "address":
                continue
            print(diff)
            print(sdiff)
            if diff.value == sdiff.value:
                found_match = True
                break
        if not found_match: return True
    return False 

try:
    oc = nixvirt.getObjectConnection(args.connect,args.type,args.verbose)

    # fetch / define object
    if args.define:
        with open(args.define,"r") as f:
            specDef = f.read()
        specDefXML = lxml.etree.fromstring(specDef)
        specUUID = uuid.UUID(specDefXML.find("uuid").text).bytes
        found = oc.fromUUIDOrNone(specUUID)
        if found:
            foundActive = found.isActive()
            foundDef = found.XMLDesc()
            foundDefXML = lxml.etree.fromstring(foundDef)
            foundName = foundDefXML.find("name").text
            specName = specDefXML.find("name").text
            if foundName != specName:
                found.undefine()
            oc.vreport(specUUID,"redefine")
            subject = oc.fromXML(specDef)
            subjectDef = subject.XMLDesc()
            subjectDefXML = lxml.etree.fromstring(subjectDef)

            defchanged = hasDefChanged(foundDefXML, subjectDefXML, specDefXML)
            oc.vreport(specUUID,"changed" if defchanged else "unchanged")
            if defchanged and (setstate != "inactive"):
                found.deactivate()
                if foundActive:
                    setstate = "active"
            else:
                # no meaninful changes were found but make sure stored XML matches active XML
                subject = oc.fromXML(foundDef)

        else:
            oc.vreport(specUUID,"define new")
            subject = oc.fromXML(specDef)
    elif args.uuid:
        specUUID = uuid.UUID(args.uuid).bytes
        subject = oc.fromUUID(specUUID)
    else:
        subject = oc.fromName(args.name)

    # set state
    match setstate:
        case "active":
            subject.activate()
        case "inactive":
            subject.deactivate()

    # set autostart
    if args.auto:
        match args.state:
            case "active":
                subject.setAutostart(True)
            case "inactive":
                subject.setAutostart(False)

except libvirt.libvirtError as err:
    print ("virtdeclare: error:", err, file=sys.stderr)
    sys.exit(1)
